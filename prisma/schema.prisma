// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgsodium(schema: "pgsodium"), supabase_vault, uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

enum difficulty_type {
  EASY
  MEDIUM
  HARD
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

model User {
  username                String             @id
  email                   String             @unique
  joinedAt                DateTime           @default(now())
  studyRooms              StudyRoom[]
  quizAttempts            QuizAttempt[]
  questionAttempts        QuestionAttempt[]
  createdStudyRoomContent StudyRoomContent[]
  createdStudyRoomQuiz    StudyRoomQuiz[]
  createdQuizzes          Quiz[]
  createdQuestions        Question[]

  StudyRoomMember StudyRoomMember[]
  ContentMark     ContentMark[]
}

model Quiz {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questions     QuizQuestion[]
  topics        QuizTopic[]
  owner_id      String?
  owner         User?           @relation(fields: [owner_id], references: [username])
  StudyRoomQuiz StudyRoomQuiz[]
  QuizAttempt   QuizAttempt[]
}

model StudyRoom {
  id      String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  code    String            @unique
  ownerId String
  owner   User              @relation(fields: [ownerId], references: [username])
  members StudyRoomMember[]

  StudyRoomQuiz    StudyRoomQuiz[]
  StudyRoomContent StudyRoomContent[]
  QuizAttempt      QuizAttempt[]
  StudyRoomDay     StudyRoomDay[]
}

model StudyRoomMember {
  username              String
  studyRoom_id          String    @db.Uuid
  user                  User      @relation(fields: [username], references: [username])
  studyRoom             StudyRoom @relation(fields: [studyRoom_id], references: [id])
  lastCreatedQuizDay    Int       @default(-1)
  lastCreatedContentDay Int       @default(-1)
  quizesCreated         Int       @default(0)
  contentCreated        Int       @default(0)
  quizes_won            Int       @default(0)
  contents_completed    Int       @default(0)

  @@id([username, studyRoom_id])
}

model StudyRoomDay {
  room_id          String             @db.Uuid
  studyRoom        StudyRoom          @relation(fields: [room_id], references: [id])
  day              Int
  scheduled_date   DateTime
  StudyRoomQuiz    StudyRoomQuiz[]
  StudyRoomContent StudyRoomContent[]

  @@id([room_id, day])
}

model StudyRoomQuiz {
  day          Int
  studyRoom_id String        @db.Uuid
  studyRoom    StudyRoom     @relation(fields: [studyRoom_id], references: [id])
  quizId       String        @db.Uuid
  quiz         Quiz          @relation(fields: [quizId], references: [id])
  createdAt    DateTime      @default(now())
  creator_id   String?
  creator      User?         @relation(fields: [creator_id], references: [username])
  studyRoomday StudyRoomDay  @relation(fields: [studyRoom_id, day], references: [room_id, day])
  QuizAttempt  QuizAttempt[]

  @@id([studyRoom_id, quizId, day])
}

model StudyRoomContent {
  id             Int              @default(autoincrement())
  day            Int
  studyRoom_id   String           @db.Uuid
  studyRoom      StudyRoom        @relation(fields: [studyRoom_id], references: [id])
  difficulty     difficulty_type? @default(EASY)
  title          String?
  link           String?
  activity       String?
  resource       String?
  creator_id     String?
  creator        User?            @relation(fields: [creator_id], references: [username])
  createdAt      DateTime         @default(now())
  topic_id       String?          @db.Uuid
  topic          Topic?           @relation(fields: [topic_id], references: [id])
  date           DateTime?
  isLive         Boolean          @default(false)
  studyRoomday   StudyRoomDay     @relation(fields: [studyRoom_id, day], references: [room_id, day])
  scheduled_date DateTime?
  ContentMark    ContentMark[]

  @@id([studyRoom_id, day, id])
}

model ContentMark {
  content_id   Int
  day          Int
  studyRoom_id String           @db.Uuid
  content      StudyRoomContent @relation(fields: [content_id, studyRoom_id, day], references: [id, studyRoom_id, day])
  username     String
  note         String?
  user         User             @relation(fields: [username], references: [username])
  markedAt     DateTime         @default(now())

  @@id([studyRoom_id, day, content_id, username])
}

model QuizAttempt {
  attemptId     Int           @id @default(autoincrement())
  studyRoom_id  String        @db.Uuid
  day           Int
  quizId        String        @db.Uuid
  studyRoomQuiz StudyRoomQuiz @relation(fields: [studyRoom_id, quizId, day], references: [studyRoom_id, quizId, day])
  quiz          Quiz          @relation(fields: [quizId], references: [id])
  username      String
  user          User          @relation(fields: [username], references: [username])
  studyRoom     StudyRoom     @relation(fields: [studyRoom_id], references: [id])
  score         Int           @default(0)
  startedAt     DateTime      @default(now())
  endedAt       DateTime?

  QuestionAttempt QuestionAttempt[]

  @@unique([studyRoom_id, quizId, username, day, attemptId])
}

model QuestionAttempt {
  attemptId    Int
  questionId   String      @db.Uuid
  day          Int
  question     Question    @relation(fields: [questionId], references: [id])
  quizAttempt  QuizAttempt @relation(fields: [attemptId], references: [attemptId])
  correct      Boolean
  answer       String[]
  User         User?       @relation(fields: [userUsername], references: [username])
  userUsername String?

  @@id([attemptId, questionId])
}

model Question {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type            QuestionType
  question        String
  options         String[]
  correctOption   String[]
  QuestionTopic   QuestionTopic[]
  QuizQuestion    QuizQuestion[]
  User            User?             @relation(fields: [username], references: [username])
  username        String?
  QuestionAttempt QuestionAttempt[]
}

model QuizQuestion {
  quizId     String   @db.Uuid
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  questionId String   @db.Uuid
  question   Question @relation(fields: [questionId], references: [id])
  index      Int?

  @@id([quizId, questionId])
}

model QuestionTopic {
  questionId String   @db.Uuid
  question   Question @relation(fields: [questionId], references: [id])
  topicId    String   @db.Uuid
  topic      Topic    @relation(fields: [topicId], references: [id])

  @@id([questionId, topicId])
}

model QuizTopic {
  quizId  String @db.Uuid
  quiz    Quiz   @relation(fields: [quizId], references: [id])
  topicId String @db.Uuid
  topic   Topic  @relation(fields: [topicId], references: [id])

  @@id([quizId, topicId])
}

model Topic {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  QuizTopic        QuizTopic[]
  QuestionTopic    QuestionTopic[]
  StudyRoomContent StudyRoomContent[]
}
